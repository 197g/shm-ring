[package]
name = "shm-pbx"
version = "0.0.0"
edition = "2021"
rust-version = "1.70"

[lib]
crate-type = ["cdylib", "lib"]

[features]
# We should call these required features, but the goal is to allow pivot to
# some other OS-level integration if we need it. In particular, interacting
# with the file paths and getting a pid might not even need the overheads of a
# (synchronous) syscall if there are other strategies. We might have cached the
# PID, want to do file traversal async, etc.
#
# FIXME: disable these defaults? We want to have a true choice.
default = ["uapi", "io-uring"]
# The IO-uring state tracking needs slotmap. We're using tokio for eventing a
# file descriptor, spawning a background task to maintain it, and
# Notify/Semaphore asynchronous coordination.
io-uring = ["dep:io-uring", "dep:slotmap", "tokio"]

[dependencies]
io-uring = { workspace = true, optional = true }
hashbrown = "0.15"
libc.workspace = true
# Synchronous waiting with a futex interface
linux-futex.workspace = true
# Using the high-level crate instead of `libc` as an abstraction of safe
# patterns. Also I'm hoping to encourage (myself, other authors) to contribute
# towards such stable, idiomatic bindings as its official support list is
# woeful.
# FIXME: no_std support; there are no good safe libc wrappers that are strictly
# `no_std`.
uapi = { workspace = true, optional = true }
slotmap = { workspace = true, optional = true }
tokio = { workspace = true, optional = true, features = ["macros", "net", "sync", "rt"] }

[dev-dependencies]
tempfile.workspace = true
tokio = { workspace = true, features = ["fs", "macros", "io-util", "rt-multi-thread"] }
